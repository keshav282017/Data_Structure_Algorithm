gfg -> https://www.geeksforgeeks.org/problems/segregate-even-and-odd-nodes-in-a-linked-list5035/1

// solution 1 : 
make two different linked list of even and odd and then return after merging them.
tc -> o(n)
sc -> 0(n) 


class Solution {
    Node divide(Node head) {
        // code here
        
        if (head == null) return null;
         
         
        Node oddHead = new Node(0) ; 
        Node evenHead = new Node(0) ; 
        
        Node oddTail = oddHead; 
        Node evenTail = evenHead ; 
        
        Node temp = head; 
        
        while(temp != null){
            if(temp.data % 2 != 0){
                    Node newNode = new Node(temp.data);
                    oddTail.next = newNode ;
                    oddTail = newNode ;
            }
            else{
                Node newNode = new Node(temp.data) ;
                evenTail.next = newNode ;
                evenTail = newNode ;
            }
            temp = temp.next;
        }
        
        evenTail.next = oddHead.next ; 
        
        return (evenHead.next == null) ?  oddHead.next : evenHead.next;
        
    }
}



// solution 2 : 
use of pointers and swap the values 
tc -> o(n) 
sc -> o(1) 


class Solution {
    Node divide(Node head) {
        Node oddhead = null, oddtail = null;
        Node evenhead = null, eventail = null;

        Node temp = head;

        while (temp != null) {
            if (temp.data % 2 == 0) {  // even
                if (evenhead == null) {
                    evenhead = temp;
                    eventail = temp;
                } else {
                    eventail.next = temp;
                    eventail = temp;
                }
            } else {  // odd
                if (oddhead == null) {
                    oddhead = temp;
                    oddtail = temp;
                } else {
                    oddtail.next = temp;
                    oddtail = temp;
                }
            }
            temp = temp.next;
        }

        // if no evens, return odd list
        if (evenhead == null) return oddhead;

        // connect even list with odd list
        eventail.next = oddhead;

        // terminate the odd list
        if (oddtail != null) oddtail.next = null;

        return evenhead;
    }
}



